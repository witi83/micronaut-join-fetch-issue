plugins {
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "com.github.ben-manes.versions" version "0.27.0"
    id "application"
}

version "0.1"
group "test.data.mn"

repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly 
}

ext {
    lombokVersion = "1.18.12"
    micronautDataVersion = "1.0.0"
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.data:micronaut-data-processor:$micronautDataVersion"

    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "javax.annotation:javax.annotation-api"
    implementation 'jakarta.persistence:jakarta.persistence-api:2.2.3'
    implementation "io.micronaut.data:micronaut-data-jdbc:$micronautDataVersion"

    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "io.micronaut.configuration:micronaut-jdbc-hikari"

    testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
}

test.classpath += configurations.developmentOnly

mainClassName = "test.data.mn.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-Xmx128m', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote', '-Dcom.sun.management.jmxremote.port=9010', '-Dcom.sun.management.jmxremote.authenticate=false', '-Dcom.sun.management.jmxremote.ssl=false', '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:9001')
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
